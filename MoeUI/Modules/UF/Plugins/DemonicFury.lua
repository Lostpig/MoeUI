if(select(2, UnitClass('player')) ~= 'WARLOCK') then return endlocal addon, ns = ...local oUF = ns.oUFlocal SPELL_POWER_DEMONIC_FURY = SPELL_POWER_DEMONIC_FURYlocal Update = function(self, event, unit, powerType)	if(self.unit ~= unit or (powerType and powerType ~= 'DEMONIC_FURY')) then return end	local df = self.DemonicFuryBar	if(df.PreUpdate) then df:PreUpdate(unit) end		local min,max = UnitPower(unit, SPELL_POWER_DEMONIC_FURY),UnitPowerMax(unit, SPELL_POWER_DEMONIC_FURY)	--local disconnected = not UnitIsConnected(unit)	df.DemonicFury:SetMinMaxValues(0, max)		if(disconnected) then		df.DemonicFury:SetValue(max)	else		df.DemonicFury:SetValue(min)		--print(max-min)	end		df.disconnected = disconnected	if(df.PostUpdate) then		return df:PostUpdate(unit)	endendlocal Path = function(self, ...)	return (self.DemonicFuryBar.Override or Update) (self, ...)endlocal isvisable = function(self,...)	local ptt = GetSpecialization()	local df = self.DemonicFuryBar	if(ptt and ptt == 2) then -- player has balance spec		df:Show()	else		df:Hide()	endendlocal function Enable(self)	local df = self.DemonicFuryBar	if(df) then		df.__owner = self		df.ForceUpdate = ForceUpdate		self:RegisterEvent('UNIT_POWER', Path)		self:RegisterEvent('PLAYER_TALENT_UPDATE',isvisable)		isvisable(self,'PLAYER_TALENT_UPDATE')		return true	endendlocal function Disable(self)	local df = self.DemonicFuryBar	if(df) then		self:UnregisterEvent('UNIT_POWER', Path)	endendoUF:AddElement('DemonicFuryBar', Path, Enable, Disable)